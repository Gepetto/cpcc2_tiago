#pragma once

// boost
#include <boost/interprocess/containers/vector.hpp>
#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <boost/interprocess/shared_memory_object.hpp>
#include <boost/interprocess/sync/interprocess_mutex.hpp>
#include <boost/interprocess/sync/named_mutex.hpp>
#include <boost/thread/thread_time.hpp>
// cpcc2_tiago
#include <cpcc2_tiago/model_builder.hpp>
#include <cpcc2_tiago/tiago_OCP.hpp>
#include <cpcc2_tiago/utils.hpp>
// auto-generated by generate_parameter_library
#include <cpcc2_tiago_parameters.hpp>

namespace cpcc2_tiago::parallel_croc_solver {

static cpcc2_tiago::Params params_;  // load parmeters from yaml file

static boost::interprocess::named_mutex mutex_{
    boost::interprocess::open_or_create, "crocoddyl_mutex"};

static boost::interprocess::managed_shared_memory crocoddyl_shm_;

static pin::Model model_;
static pin::Data data_;

static pin::FrameIndex lh_id_;

static tiago_OCP::OCP OCP_tiago_;

static int OCP_horizon_length_;
static double OCP_time_step_;
static int OCP_solver_iterations_;
static double OCP_solver_frequency_;

static std::vector<std::string> joints_names_;
static int n_joints_;

static Eigen::VectorXd x_meas_;
static shared_vector *x_meas_shm_;

static Eigen::VectorXd us_;
static shared_vector *us_shm_;

static Eigen::VectorXd xs0_;
static shared_vector *xs0_shm_;
static Eigen::VectorXd xs1_;
static shared_vector *xs1_shm_;

static Eigen::MatrixXd Ks_;
static shared_vector *Ks_shm_;

static Eigen::Vector3d target_;
static shared_vector *target_shm_;

static bool *solver_started_shm_;
static bool *is_first_update_done_shm_;
static bool is_first_update_done_ = false;

static bool *start_sending_cmd_shm_;

static double *current_t_shm_;

static bool *urdf_xml_sent_;
static shared_string *urdf_xml_;

static double current_t_;
static double start_solving_time_;
static double last_solving_time_;
static double solving_time_;
static double solver_freq_;
static double diff_;

static CircularVector solving_time_vector_(20);
static CircularVector solver_freq_vector_(20);

/// @brief Read parameters
void read_params();

/// @brief Resize vectors
void resize_vectors();

/// @brief Create the shared memory
void init_shared_memory();

/// @brief get the ROS time in order to be synchronized
/// @return the ROS time
double get_ROS_time();

/// @brief Read x from the shared memory
/// @return the state as a VectorXd
Eigen::VectorXd read_controller_x();

/// @brief Read target from the shared memory
/// @return the target as a Vector3d
Eigen::Vector3d read_controller_target();

/// @brief Send the result of the controller to the shared memory
void send_controller_result(Eigen::VectorXd us, Eigen::VectorXd xs0,
                            Eigen::VectorXd xs1, Eigen::MatrixXd Ks);

}  // namespace cpcc2_tiago::parallel_croc_solver

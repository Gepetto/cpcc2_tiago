#ifndef PARALLEL_CROC_SOLVER_HPP
#define PARALLEL_CROC_SOLVER_HPP

#include <boost/interprocess/containers/vector.hpp>
#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <boost/interprocess/shared_memory_object.hpp>
#include <boost/interprocess/sync/interprocess_mutex.hpp>
#include <boost/thread/thread_time.hpp>
#include <iostream>

#include "cpcc2_tiago/model_builder.hpp"
#include "cpcc2_tiago/shared_mutex.hpp"
#include "cpcc2_tiago/tiago_OCP_maker.hpp"

// auto-generated by generate_parameter_library
#include "cpcc2_tiago_parameters.hpp"

cpcc2_tiago::Params params_; // load parmeters from yaml file

boost::interprocess::named_mutex mutex2_{boost::interprocess::open_or_create,
                                         "mutex2"};

boost::interprocess::shared_memory_object x_meas_shm_;
boost::interprocess::mapped_region x_meas_region_;

boost::interprocess::shared_memory_object us_shm_;
boost::interprocess::mapped_region us_region_;

boost::interprocess::shared_memory_object xs_shm_;
boost::interprocess::mapped_region xs_region_;

boost::interprocess::shared_memory_object Ks_shm_;
boost::interprocess::mapped_region Ks_region_;

boost::interprocess::shared_memory_object target_shm_;
boost::interprocess::mapped_region target_region_;

std::vector<std::string> joints_names_;
int n_joints_;

Eigen::VectorXd x_meas_;
double *x_meas_data_ptr_;
Eigen::VectorXd x_meas_smh_vec_;

Eigen::VectorXd us_;
Eigen::VectorXd *us_smh_ptr_;

Eigen::VectorXd xs_;
Eigen::VectorXd *xs_smh_ptr_;

Eigen::MatrixXd Ks_;
Eigen::MatrixXd *Ks_smh_ptr_;

Eigen::Vector3d *target_smh_ptr_;

void read_params();
void resize_vectors();

void init_shared_memory();

#endif // PARALLEL_CROC_SOLVER_HPP